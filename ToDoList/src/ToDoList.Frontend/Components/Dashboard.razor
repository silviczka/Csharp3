@using ToDoList.Frontend.Views
@using ToDoList.Frontend.Clients
@inject IToDoItemsClient ToDoItemsClient
@rendermode InteractiveServer
@page "/dashboard"

<PageTitle>Dashboard</PageTitle>

<h1>Dashboard</h1>
<table style="width: 50%; border-collapse: collapse; text-align: center;">
    <thead>
        <tr>
            <th style="border: 1px solid black; padding: 8px;">ID</th> <!-- Set width for ID -->
            <th style="border: 1px solid black; padding: 8px;">Name</th>
            <th style="border: 1px solid black; padding: 8px;">Description</th>
            <th style="border: 1px solid black; padding: 8px;">Completed</th> <!-- Set width for Completed -->
            <th style="border: 1px solid black; padding: 8px;">Category</th> <!-- Set width for Category -->
        </tr>
    </thead>
    @if (toDoItems is null)
    {
        <p>Loading...</p>
    }
    else
    {
        @foreach (var toDoItem in toDoItems)
        {
            <tr>
                <td>@toDoItem.ToDoItemId</td>
                <td>@toDoItem.Name</td>
                <td>@toDoItem.Description</td>
                <td>@toDoItem.IsCompleted</td>
                <td>@toDoItem.Category</td>
            </tr>

        }
    }
</table>

<br>
<button @onclick="SortById">Seradit dle cisla ID</button>

<button @onclick="SortByName">Seradit abecedne dle ukolu</button>
<br>


@code
{
    private List<ToDoItemView>? toDoItems;

    protected override async Task OnInitializedAsync()
    {
        toDoItems = await ToDoItemsClient.ReadItemsAsync();
    }

    public void SortById()
    {
        if (toDoItems is not null)
        {
            toDoItems = toDoItems.OrderBy(o => o.ToDoItemId).ToList();
        }
    }
    public void SortByName()
    {
        if (toDoItems is not null)
        {
            toDoItems = toDoItems.OrderBy(o => o.Name).ToList();
        }
    }

}
