@page "/editToDoItem/{ItemId:int}"
@using ToDoList.Frontend.Views
@using ToDoList.Frontend.Clients
@inject NavigationManager NavigationManager
@inject IToDoItemsClient ToDoItemsClient
@rendermode InteractiveServer

<PageTitle>Edit To Do Item</PageTitle>

@ItemId
@if (ToDoItem is not null)
{

    <EditForm Model="ToDoItem" FormName="EditToDoItem" OnSubmit="Submit">
        <InputText id="Name" @bind-Value="ToDoItem.Name" class="form-control mb-3" />
        <InputText id="Description" @bind-Value="ToDoItem.Description" class="form-control mb-3" />
        <InputCheckbox id="IsCompleted" @bind-Value="ToDoItem.IsCompleted" class="mb-3" />
        <InputText id="Category" @bind-Value="ToDoItem.Category" class="form-control mb-3" />
        <button type="submit" class="btn btn-primary">Submit</button>
    </EditForm>

    <div class="mt-3">
        <strong>Name:</strong> @ToDoItem.Name
        <br />
        <strong>Description:</strong> @ToDoItem.Description
        <br />
        <strong>Completed:</strong> @ToDoItem.IsCompleted
        <br />
        <strong>Category:</strong> @ToDoItem.Category
    </div>
}

@code
{
    protected override async Task OnInitializedAsync()
    {
        ToDoItem = await ToDoItemsClient.ReadItemByIdAsync(ItemId);

    }
    [Parameter]
    public int ItemId {get; set;}
    [SupplyParameterFromForm]
    public ToDoItemView ToDoItem{get;set;}
    public async Task Submit()

    {
        await ToDoItemsClient.UpdateItemAsync(ToDoItem);
        NavigationManager.NavigateTo("/dashboard");
    }

}

